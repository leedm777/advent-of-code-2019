(ns advent-of-code-2019.day20-test
  (:require [clojure.test :refer :all]
            [advent-of-code-2019.util :refer :all]
            [advent-of-code-2019.day20 :refer :all]
            [clojure.string :as s]))

(def ex1
  (s/join "\n"
          ["         A           "
           "         A           "
           "  #######.#########  "
           "  #######.........#  "
           "  #######.#######.#  "
           "  #######.#######.#  "
           "  #######.#######.#  "
           "  #####  B    ###.#  "
           "BC...##  C    ###.#  "
           "  ##.##       ###.#  "
           "  ##...DE  F  ###.#  "
           "  #####    G  ###.#  "
           "  #########.#####.#  "
           "DE..#######...###.#  "
           "  #.#########.###.#  "
           "FG..#########.....#  "
           "  ###########.#####  "
           "             Z       "
           "             Z       "]))
(def ex1-parsed (parse-donut ex1))

(deftest day20-part1
  (testing "example 1"
    (is (= [9 2] (:entrance ex1-parsed)))
    (is (= [13 16] (:exit ex1-parsed)))
    (is (= [[9 5] [2 8]] (get-in ex1-parsed [:graph [9 6]])))
    (is (= 23 (dec (count (donut-path ex1-parsed)))))))

(def ex2
  (s/join "\n"
          [
           "                   A               "
           "                   A               "
           "  #################.#############  "
           "  #.#...#...................#.#.#  "
           "  #.#.#.###.###.###.#########.#.#  "
           "  #.#.#.......#...#.....#.#.#...#  "
           "  #.#########.###.#####.#.#.###.#  "
           "  #.............#.#.....#.......#  "
           "  ###.###########.###.#####.#.#.#  "
           "  #.....#        A   C    #.#.#.#  "
           "  #######        S   P    #####.#  "
           "  #.#...#                 #......VT"
           "  #.#.#.#                 #.#####  "
           "  #...#.#               YN....#.#  "
           "  #.###.#                 #####.#  "
           "DI....#.#                 #.....#  "
           "  #####.#                 #.###.#  "
           "ZZ......#               QG....#..AS"
           "  ###.###                 #######  "
           "JO..#.#.#                 #.....#  "
           "  #.#.#.#                 ###.#.#  "
           "  #...#..DI             BU....#..LF"
           "  #####.#                 #.#####  "
           "YN......#               VT..#....QG"
           "  #.###.#                 #.###.#  "
           "  #.#...#                 #.....#  "
           "  ###.###    J L     J    #.#.###  "
           "  #.....#    O F     P    #.#...#  "
           "  #.###.#####.#.#####.#####.###.#  "
           "  #...#.#.#...#.....#.....#.#...#  "
           "  #.#####.###.###.#.#.#########.#  "
           "  #...#.#.....#...#.#.#.#.....#.#  "
           "  #.###.#####.###.###.#.#.#######  "
           "  #.#.........#...#.............#  "
           "  #########.###.###.#############  "
           "           B   J   C               "
           "           U   P   P               "]))

(def ex2-parsed (parse-donut ex2))

(deftest day20-part1-2
  (testing "example 2"
    (is (= 58 (dec (count (donut-path ex2-parsed)))))))
